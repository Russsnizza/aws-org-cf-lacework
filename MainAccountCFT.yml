AWSTemplateFormatVersion: 2010-09-09
Description: "Input environment variables for Lacework and Lambda function to register with Lacework"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Parameter store values"
        Parameters:
          - ExternalId
          - LaceworkAccount
          - LaceworkSubAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
      - Label:
          default: "Lambda Function"
        Parameters:
          - NamePrefix
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - S3BucketName
          - S3KeyPrefix
    ParameterLabels:
      ExternalId:
        default: External ID  
      LaceworkAccount:
        default: "Your Lacework Account (do not include '.lacework.net')"
      LaceworkSubAccountName:
        default: Lacework Sub-Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      NamePrefix:
        default: Prefix for the Lambda Function name
      S3BucketName:
        default: Cloudformation S3 Bucket
      S3KeyPrefix:
        default: Cloudformation S3 Key Prefix

Parameters:
  ExternalId:
    Type: String
    Default: 'A4F9B18'
    Description: The cross-account access role created by the stack will use this value for its ExternalID.
    MinLength: 2
    MaxLength: 1224
  LaceworkAccount:
    Type: String
    Default: 'lwinttimfrazier'
    Description: "Enter your Lacework account name. Do not include the '.lacework.net' at the end."
    MinLength: '1'
  LaceworkSubAccountName:
    Type: String
    Description: "If Lacework Organizations is enabled, enter the sub-account. Leave blank if Lacework Organizations is not enabled."
    AllowedPattern: '^$|^[a-zA-Z0-9.]+(?:-[a-zA-Z0-9.]+)*$'
    ConstraintDescription: "Invalid Lacework account name entered. The account name may contain alphanumeric characters and dashes only."
  LaceworkAccessKeyID:
    Type: String
    Default: 'LWINTTIM_F65FEE06A1948E058C6E21C78F74F70579F42D6C83CA67B'
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Access Key ID contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  LaceworkSecretKey:
    Type: String
    Default: '_3fa114af730aa586733c3a02c502e7a7'
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Secret Key contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  NamePrefix:
    Type: String
    Default: 'lacework-provision'
    Description: "Names of resources created by the stack will be prefixed with this value to ensure uniqueness."
    MinLength: '1'
    MaxLength: '45'
    # advanced
  S3BucketName:
    Type: String
    Default: lw-account2-open1
    MinLength: '1'
    Description: "Enter the S3 bucket for Lacework Control Tower Cloudformation assets. Use this if you want to customize your deployment."
  S3KeyPrefix:
    Type: String
    Default: lacework-organization-cfn
    MinLength: '1'
    Description: "Enter the S3 key prefix for Lacework Control Tower Cloudformation assets directory. Use this if you want to customize your deployment."

Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'S3BucketName'
      Prefix: !Ref 'S3KeyPrefix'
      Objects:
        - '/LaceworkIntegrationSetup.zip'
  
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/${S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'S3KeyPrefix', '/LaceworkIntegrationSetup.zip']]
      Handler: lw_integration_lambda_function.handler
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          LW_ACCOUNT: !Ref LaceworkAccount
          LW_SUBACCOUNT: !Ref LaceworkSubAccountName
          ENVIRONMENT: "development"
          member_account_template: !Sub "https://s3.amazonaws.com/${S3BucketName}/${S3KeyPrefix}/templates/lacework-aws-cfg-member.template.yml"
      Role: !GetAtt LaceworkSetupFunctionRole.Arn
  LaceworkSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Setup_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: AccountStatusCheck
            Effect: Allow
            Action:
              - organizations:DescribeAccount
            Resource:
              !Join [ '', [ 'arn:aws:organizations::', !Ref 'AWS::AccountId', ':account/', '*' ,'/','*'] ]
          - Sid: StackSetInstanceCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            - organizations:DescribeAccount
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/', '*' ]]
          - Sid: StackSetInstanceDelete
            Effect: Allow
            Action:
            - cloudformation:DeleteStackSet
            - cloudformation:DeleteStackInstances
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/', '*' ]]
          - Sid: StackSetCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackSet
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/Lacework-*' ]]
          - Sid: S3Ops
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
            - !Join ['',['arn:aws:s3:::', !Ref S3BucketName, '/', !Ref S3KeyPrefix, '*']]
          - Sid: PassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ]]
          - Sid: ApiKeySecretRead
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:UpdateSecret
            Resource:
              Ref: LaceworkApiCredentials
          - Sid: ListAccounts
            Effect: Allow
            Action:
              - organizations:ListAccounts
            Resource: "*"
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkApiCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Lacework API Access Keys
      Name: LaceworkApiCredentials
      SecretString:
        Fn::Join:
        - ''
        - - '{"AccessKeyID":"'
          - Ref: LaceworkAccessKeyID
          - '","SecretKey":"'
          - Ref: LaceworkSecretKey
          - '","AccessToken": "0"'
          - ',"TokenExpiry": 0 }' 